\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename mistty.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx.@*
@end ifinfo
@settitle MisTTY
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Emacs
@direntry
* MisTTY: (mistty.info). Shell/comint alternative with a fully-functional
                        terminal
@end direntry

@c %**end of header

@copying
@quotation
MisTTY 1.5.1snapshot

Stephane Zermatten

Copyright @copyright{} 2023-2025, Stephane Zermatten
@end quotation

@end copying

@titlepage
@title MisTTY
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top MisTTY
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{0}
`MisTTY' is a major mode for @code{Emacs} 29.1 and up that runs
a shell inside of a buffer, similarly to comint mode. It is built on
top of @code{term.el}. Check out its project page at
@indicateurl{https://github.com/szermatt/mistty}.

@code{M-x mistty} creates a buffer with an interactive shell. (@ref{1,,Launching})

MisTTY feels very much like comint mode: you can move around freely
and run any Emacs command you want - until you press TAB and end up
with the native completion or notice the shell autosuggestions. With
MisTTY you have access to both Emacs and the shell commands and
editing tools.

Additionally, commands that take over the entire screen
(@ref{2,,Fullscreen Mode}) such as @code{less} or @code{vi} also
work, temporarily taking over the window, while scrollback remains
available in another buffer.


MisTTY is known to work on Linux and MacOS. It also supports non-shell
command-line programs, such as @code{python}.

The latest version of this documentation is available at
@indicateurl{https://mistty.readthedocs.io/en/latest/}.  Once MisTTY is installed,
this documentation can be accessed from inside Emacs using @code{M-x
info g mistty}

@cartouche
@quotation Note 
If you encounter issues, please take the time to file a bug. (@ref{3,,Reporting issues})
@end quotation
@end cartouche

@menu
* Comparison with other packages:: 
* Contents:: 
* Index:: 

@end menu

@node Comparison with other packages,Contents,Top,Top
@anchor{index comparison-with-other-packages}@anchor{4}@anchor{index mistty}@anchor{5}
@chapter Comparison with other packages


MisTTY isn’t a terminal emulator, but rather a frontend to an existing
terminal emulator, the built-in @code{term.el}. Its goal is to make
it more convenient to use while inside of Emacs and better integrate
with Emacs itself. In theory, other terminal emulators than
@code{term.el} might be used as engine for MisTTY, such as vterm@footnote{https://github.com/akermu/emacs-libvterm} and eat@footnote{https://codeberg.org/akib/emacs-eat}.

MisTTY has some similarities with coterm@footnote{https://github.com/emacsmirror/coterm}; it offers the same switch
between full-screen and line mode.

@code{Coterm}, @code{term.el} and @code{eat} all have a
line mode, just like @code{comint} does, which allows you to edit
a command line as a whole before sending it to the shell. While in
line mode, rendering is done by Emacs and editing commands are Emacs
commands. In constrast, with MisTTY, all rendering is done by the
shell through the terminal. This is why native shell completion and
autosuggestion is available with MisTTY and not in line modes and why
you can freely mix shell commands with Emacs commands while editing
the command line.

@code{term.el} and @code{eat} also have a char mode, where
rendering and command execution is handled by the shell, and editing
with Emacs isn’t available. The difference with MisTTY is then that
MisTTY makes Emacs editing commands available when possible.

@code{eat} also has a semi-char mode, which is the closest there
is to MisTTY. In that mode, Emacs movements commands are available.
However, Emacs commands that modify the buffer, aren’t available to
edit the command line. In contrast, MisTTY allows Emacs to navigate to
and edit the whole buffer, then replays changes made to the
command-line.

@node Contents,Index,Comparison with other packages,Top
@anchor{index contents}@anchor{6}
@chapter Contents


@menu
* Usage:: 
* Shells:: 
* Extending MisTTY:: 
* FAQ:: 
* Contributing:: 

@end menu

@node Usage,Shells,,Contents
@anchor{usage doc}@anchor{7}@anchor{usage usage}@anchor{8}
@section Usage


@menu
* Installation:: 
* Launching:: 
* Terminal vs. Scrollback: Terminal vs Scrollback. 
* Navigating the scrollback zone:: 
* Fullscreen Mode:: 
* Command History:: 
* Backward Search:: 
* Completion-at-point:: 
* Template Expansion:: 
* Directory Tracking:: 
* Remote Shells with TRAMP:: 
* Directory tracking and TRAMP:: 
* Keybindings used by MisTTY:: 
* Supported OSC Control Sequences:: 

@end menu

@node Installation,Launching,,Usage
@anchor{usage id1}@anchor{9}@anchor{usage installation}@anchor{a}
@subsection Installation


To use MisTTY, first install its package,

@quotation


@itemize -

@item 
from MELPA or MELPA Stable@footnote{https://melpa.org/#/getting-started}, using @code{M-x
package-install mistty}

@item 
from source using @code{M-x package-vc-install https://github.com/szermatt/mistty}
@end itemize
@end quotation

And then launch it with @code{M-x mistty}, as described in @ref{1,,Launching}.

You’ll likely want to eventually bind that to some shortcut:

@example
(use-package mistty
  :bind (("C-c s" . mistty)))
@end example

and, unless you’re using @code{Bash}, configure directory tracking
for your shell (@ref{b,,Directory Tracking}), but read on for more details.

@node Launching,Terminal vs Scrollback,Installation,Usage
@anchor{usage id2}@anchor{c}@anchor{usage launching}@anchor{1}
@subsection Launching


To create a new interactive shell buffer in MisTTY mode, call
@code{M-x mistty}, which either creates a new shell or goes to an
existing MisTTY buffer, or @code{M-x mistty-create}, which creates a
new MisTTY buffer.

Here’s a quick list of the commands defined by the MisTTY package,
their behavior and arguments:

@quotation

@geindex command; mistty-create
@geindex command; mistty
@geindex command; mistty-create-other-window
@geindex command; mistty-other-window
@geindex variable; mistty-shell-command
@geindex variable; explicit-shell-file-name
@geindex variable; shell-file-name
@geindex variable; mistty-buffer-name
@end quotation


@table @asis

@item mistty-create : command

This command launches a new interactive shell in a
MisTTY buffer in the current buffer’s @code{default-directory}.

The shell that is launched is the one that’s configured with
@code{M-x configure-option mistty-shell-command}. If
@code{mistty-shell-command} is not set, MisTTY falls back to
@code{explicit-shell-file-name}, @code{shell-file-name}, then
the environment variables 
@geindex ESHELL
@geindex environment variable; ESHELL
@code{ESHELL} and 
@geindex SHELL
@geindex environment variable; SHELL
@code{SHELL}.

With a prefix argument, this command asks for a directory for the
new shell, instead of using the current buffer’s current
directory. This is particularly useful if you want to run shell
on a remote host. (@ref{d,,Remote Shells with TRAMP})

By default, new buffers are called “*mistty*”, or, if you use
TRAMP “*mistty@@hostname*”. You can configure this with @code{M-x
customize-option mistty-buffer-name}.

@item mistty : command

This command creates a new MisTTY buffer the first time it is
called. Afterwards, it’ll try to guess what’s most appropriate,
displaying an existing MisTTY buffer or creating a new one.

With a prefix argument, this command always creates a new buffer.

@geindex command; mistty-other-window

@item mistty-other-window : command

This command does the same as @code{mistty} but opens the buffer in
another window.

@item mistty-create-other-window: command

This command does the same as @code{mistty-create}, but opens the
buffer in another window.
@end table

If you need more control on how MisTTY windows are handled than what’s
provided by the @code{-other-window} variants, you can configure it using
@code{M-x customize-option display-comint-buffer-action} or @code{M-x
customize-option display-buffer-alist}. In the latter case, note that
MisTTY buffers belong to the @code{comint} category, just like shell
buffers.

See the section “Window Choice” of the Emacs manual for details.

@quotation

@geindex command; mistty-in-project
@geindex command; mistty-ssh
@geindex command; mistty-docker
@end quotation


@table @asis

@item mistty-in-project: command

This command creates a new MisTTY buffer in the root directory of
the current project the first time it is called. Afterwards, it’ll
try to guess what’s most appropriate, displaying an existing
MisTTY buffer or creating a new one.

With a prefix argument, this command always creates a new buffer.

Note that if you want @code{M-x project-kill-buffers} to kill such
buffers, you’ll want to execute
@code{mistty-project-init-kill-buffer} somewhere in your
configuration or tell @code{M-x configure-option
project-kill-buffer-conditions} about MisTTY.

@item mistty-ssh : command

This command creates a new MisTTY buffer connected to another host
using SSH. This is just a shortcut that uses TRAMP to connect to a
remote host. (@ref{d,,Remote Shells with TRAMP})

@item mistty-docker: command

This command creates a new MisTTY buffer connected to
a docker instance. This requires the docker command-line tool to
be installed. This is just a shortcut that uses TRAMP to connect
to a remote host. (@ref{d,,Remote Shells with TRAMP})
@end table

@node Terminal vs Scrollback,Navigating the scrollback zone,Launching,Usage
@anchor{usage term-vs-scroll}@anchor{e}@anchor{usage terminal-vs-scrollback}@anchor{f}
@subsection Terminal vs. Scrollback


MisTTY buffers are divided into two distinct zones, exhibiting
different behaviors:

The `scrollback zone', is where you can see commands that have
been executed and their output.

The `terminal zone', marked by a purple line on the left of the
window, is where you can type command and interact with the
terminal. In this zone, @code{TAB} triggers the shell completion, if
available. With some shells, you’ll see autosuggestions as you type.

The scrollback zone operates like a standard Emacs buffer, allowing you to modify it freely.

The terminal zone, on the other hand, imposes certain limitations.
While a shell is attached, you can edit the command you are about to
execute, but you can’t modify the prompt itself. Any changes made to
the prompt will be reverted by the shell.

The terminal zone is where the magic happens: this is where you can
use a mix of Emacs and shell key bindings to edit the command
line. The trickiest part is choosing which key bindings you want Emacs
to handle and which key bindings you want the shell to handle.

By default, Emacs intercepts most key bindings, but a few are sent directly to the terminal:


@itemize -

@item 
@code{RET}: Executes the command in the shell.

@item 
@code{TAB}: Initiates command completion in the shell.

@item 
@code{C-a}: Moves the cursor to the beginning of the line.

@item 
@code{C-e}: Moves the cursor to the end of the line.

@item 
@code{C-d}: Deletes the next character or exits the program.

@item 
@code{M-p}: Navigates upwards in the command history (equivalent to @code{C-p} in the terminal).

@item 
@code{M-n}: Navigates downwards in the command history (equivalent to @code{C-n} in the terminal).

@item 
@code{M-r}: Invokes reverse command history search (equivalent to @code{C-r} in the terminal). See @ref{10,,Backward Search}.

@item 
@code{M-.}: Inserts the last argument from command history.
@end itemize

Additionally, @code{C-c C-c} sends the TERM signal to the terminal.

The program connected to the terminal determines the actual effects of
these shortcuts. While most shells and command-line editing tools
support these shortcuts by default, behavior may vary.

@cartouche
@quotation Warning 
MisTTY will not function if your shell is configured to use `VI
mode' by default. Please `disable VI mode' before utilizing
MisTTY. For instructions on disabling VI mode specifically for
MisTTY buffers, while preserving it otherwise, consult see
@ref{11,,Shells}. VI mode must be disabled even if you plan to use VI
commands through Evil.

More generally, MisTTY relies on a set of common keybindings and
behaviors to communicate with the terminal applications and will
not behave properly if the application doesn’t understand these or
interpret them in an unusual way. For a list of these keybindings,
see @ref{12,,Keybindings used by MisTTY}.
@end quotation
@end cartouche

To get the most out of MisTTY, it’s worth it to take the time to
configure it to send to the terminal the shell key bindings that you
actually use and keep everything else behaving as usual for your Emacs
configuration.

@geindex map; mistty-prompt-map
@geindex map; mistty-mode-map

To bind keys only in the terminal zone, bind them to
@code{mistty-prompt-map}. To bind keys in both zones, bind them to
@code{mistty-mode-map}. Examples are provided below.

The following commands are useful for sending key sequences to the
current shell or terminal program:

@geindex command; mistty-send-key


@table @asis

@item `mistty-send-key' : command

This command, when called interactively, forwards the key from
which it was invoked. It is designed to be bound to the shell key
bindings you wish to function in the terminal zone,
@cite{mistty-prompt-map}.

For example, to search in the shell command history, typically
bound to @code{C-r}, MisTTY binds it to @code{M-r}, similar to
comint. However, if you’d prefer to use the original binding, you
can do the following:

@example
(keymap-set mistty-prompt-map "C-r" #'mistty-send-key)
@end example

To have the key available in both the scrollback and terminal
zones, bind it to @cite{mistty-mode-map} instead.

You can also send arbitrary keys to @cite{mistty-send-key}. For
example:

@example
(defun my-mistty-M-s (n)
  (interactive "p")
  (mistty-send-key n (kbd "M-s")))
(keymap-set mistty-prompt-map "C-c a" #'my-mistty-M-s)
@end example
@end table

@geindex command; mistty-send-last-key


@table @asis

@item `mistty-send-last-key' : command

This command forwards the last key combination from the sequence
it was invoked from to the terminal. For instance, @code{C-c C-c}
is bound to @cite{mistty-send-last-key}, such that the terminal
ultimately receives just @code{C-c}.
@end table

For quick testing or for shell shortcuts you use infrequently, use
the @code{C-q} prefix to bypass Emacs key bindings and send keys
directly to the terminal. For example, pressing @code{C-q <right>}
sends a right-arrow key press to the terminal instead of moving the
cursor.

@geindex command; mistty-send-key-sequence

If further control is needed, try out:


@table @asis

@item `mistty-send-key-sequence' : command

This command sends all keys you press to the terminal until you
press @code{C-g}.

By default, it is bound to @code{C-c C-q}.
@end table

@geindex command; mistty-newline


@table @asis

@item `mistty-newline' : command

This command sends a single newline as bracketed paste, meaning
that the newline should be inserted as-is and not execute the
current command.

By default, it is bound to @code{S-<return>}.
@end table

@node Navigating the scrollback zone,Fullscreen Mode,Terminal vs Scrollback,Usage
@anchor{usage navigating-the-scrollback-zone}@anchor{13}@anchor{usage navigation}@anchor{14}
@subsection Navigating the scrollback zone


@geindex command; mistty-end-of-line-goto-cursor

@code{C-e C-e} moves the point back inside the prompt. This is handled
by the interactive function @code{mistty-end-of-line-or-goto-cursor}

@geindex command; mistty-goto-cursor

@code{M-x mistty-goto-cursor} also moves the point back inside the
prompt. You can bind it to a custom shortcut if you don’t like
overloading C-e.

@geindex command; mistty-previous-output

@code{C-c C-p} or @code{M-x mistty-goto-previous-output} goes to the
beginning of the previous command output. This is useful to if the
buffer has scrolled too far and you want to see it from the beginning.

@geindex command; mistty-next-output

@code{C-c C-n} or @code{M-x mistty-goto-next-output} does the reverse,
that is, it goes to the next command output.

@geindex command; mistty-select-output

@code{C-c C-o} or @code{M-x mistty-select-output} selects the command
output at or before point. With an argument, selects the Nth previous
command output.

@geindex command; mistty-create-buffer-with-output

@code{C-c C-r} or @code{M-x mistty-create-buffer-with-output} creates
a new buffer containing the command output at or before point. With an
argument, creates a buffer containing the Nth previous command output.

@geindex command; mistty-goto-previous-input

@code{M-x mistty-goto-previous-input} goes to the beginning of the
previous command input, that is, the previous prompt. While this is a
way of going back the command you’ve previously input, it’s best to
use the shell native command history, as discussed in @ref{15,,Command History}.

@geindex command; mistty-goto-next-input

@code{M-x mistty-goto-next-input} goes to the next command input.

@geindex command; mistty-clear
@geindex variable; mistty-allow-clearing-scrollback

@code{C-c C-l} or @code{M-x mistty-clear} deletes the content of the
buffer until the current prompt. With a numeric argument N, it deletes
the content of the buffer until the Nth previous prompt.

Alternatively, if you prefer clearing the scrollback zone from the
command line instead of using an Emacs command, you can also do
@code{M-x customize-option mistty-allow-clearing-scrollback} to let
the @code{reset} and @code{clear} commands clear the whole buffer instead of
just the terminal zone.

MisTTY defines an index for imenu, so that @code{M-x imenu} lets you
select commands and outputs to go to. This also allows packages based
on imenu to work, such as breadcrumbs@footnote{https://github.com/joaotavora/breadcrumb} that can display the
current command in a header, if enabled in a MisTTY buffer.

@cartouche
@quotation Note 
If imenu shows strange commands, consider adding an OSC133 B
code (”033]133;B007”) at the end of your prompt so MisTTY knows
when the prompt ends and where user input begins. See @ref{16,,Supported OSC Control Sequences}
@end quotation
@end cartouche

Additionally, MisTTY defines prompts as defuns, so any function that
applies on defun applies on prompts in a MisTTY buffer, so, for
example:

@quotation


@itemize -

@item 
@code{C-x n d} or @code{M-x narrow-to-defun}, narrows the buffer
to the current prompt and its output

@item 
@code{C-M a} or @code{M-x beginning-to-defun}, moves point
to the beginning of the current prompt

@item 
@code{C-M e} or @code{M-x end-to-defun}, moves point to the end
of the current prompt’s output

@item 
@code{C-M h} or @code{M-x mark-defun}, marks the current prompt
and its output
@end itemize
@end quotation

@node Fullscreen Mode,Command History,Navigating the scrollback zone,Usage
@anchor{usage fullscreen}@anchor{2}@anchor{usage fullscreen-mode}@anchor{17}
@subsection Fullscreen Mode


MisTTY detects when a program, such as @code{less} or
@code{vi}, requests full-screen mode. In response, it splits the
MisTTY buffers in two:


@itemize -

@item 
The `terminal buffer', which displays the program’s output and
allows you to interact with it. It operates in term-mode.

@item 
The `Scrollback Buffer', which contains the previous command lines
along with their outputs.
@end itemize

@geindex command; mistty-toggle-buffers

To switch between these buffers, press @code{C-c C-j} or execute
@code{M-x mistty-toggle-buffers}

When the full-screen program exits, the two buffers are merged back
together. Please note that the output from the full-screen application
is not available in the scrollback region.

@node Command History,Backward Search,Fullscreen Mode,Usage
@anchor{usage command-history}@anchor{18}@anchor{usage history}@anchor{15}
@subsection Command History


MisTTY doesn’t track command history. It relies instead on being able
to access the history of the different interactive command-line tools.

The command history available in most shells and command-line editing tools is
available in MisTTY using the following shortcuts:


@itemize -

@item 
@code{M-p} moves up command history

@item 
@code{M-n} moves down command history

@item 
@code{M-r} triggers a backward search in command history (@ref{10,,Backward Search})

@item 
@code{M-.} insert the last argument from command history
@end itemize

To get the same key bindings you’d get in a normal terminal, you can
bind @code{C-p}, @code{C-n}, or @code{C-r} to @code{mistty-send-key}
in the terminal zone of the MisTTY buffer. For example:

@example
(keymap-set mistty-prompt-map "C-p" #'mistty-send-key)
(keymap-set mistty-prompt-map "C-n" #'mistty-send-key)
(keymap-set mistty-prompt-map "C-r" #'mistty-send-key)
@end example

@node Backward Search,Completion-at-point,Command History,Usage
@anchor{usage backward-search}@anchor{19}@anchor{usage bs}@anchor{10}
@subsection Backward Search


@geindex map; mistty-forbid-edit-map
@geindex variable; mistty-forbid-edit-regexps
@geindex variable; mistty-forbid-edit-map

Within various shells, pressing @code{C-r} or @code{M-r} activates a
special backward search mode, where editing options are limited.
MisTTY identifies this mode using the regular expressions set in
@code{M-x customize-option mistty-forbid-edit-regexps}.

When this mode is active:


@itemize -

@item 
You can append or delete text but cannot modify it. Though yanking
text and word deletion are still possible, most Emacs editing
won’t work.

@item 
The modeline displays “FE:run” to indicate Forbid Edit mode.

@item 
Arrow keys are sent directly to the terminal, which is beneficial
for shells like Fish that allow selection from multiple choices. To
customize this functionality, adjust key bindings in
@code{mistty-forbid-edit-map}, which extends @code{mistty-prompt-map}
in this mode.

@item 
Pressing @code{C-g} sends a signal to the terminal and typically
exits backward search mode without making a selection.
@end itemize

@node Completion-at-point,Template Expansion,Backward Search,Usage
@anchor{usage cap}@anchor{1a}@anchor{usage completion-at-point}@anchor{1b}
@subsection Completion-at-point


When in a MisTTY buffer, it’s best to rely on the completion or
autosuggestions provided by the shell or other command-line tool
currently running, as they’re more up-to-date and context-sensitive
than what Emacs can provide.

However, some form of Emacs-based completion can still be useful from
inside of a MisTTY buffer, to complete abbreviations, expand templates
or add emojis.

The following completion packages are known to work with MisTTY out of
the box, including auto-completion, if enabled:


@itemize -

@item 
Emacs builtin @cite{complete-in-region}

@item 
corfu@footnote{https://github.com/minad/corfu}

@item 
company-mode@footnote{http://company-mode.github.io}
@end itemize

Emacs @cite{hippie-expand} also works. That’s not completion, but it’s
close.

Other packages might work or might be made to work with some efforts.
Auto-completion is usually the main challenge, described in
@ref{1c,,Auto-complete}. Please file a bug (@ref{3,,Reporting issues}) if you
encounter issues with other completion packages.

@menu
* Autosuggestions:: 

@end menu

@node Autosuggestions,,,Completion-at-point
@anchor{usage autosuggestions}@anchor{1d}
@subsubsection Autosuggestions


@geindex variable; mistty-wrap-capf-functions

@code{completion-at-point} completes the text `around' the point.
This is generally convenient, but gets confused by shell
autosuggestions, available in Fish or ZSH.

What if you typed “com” and the shell helpfully suggests “completion”?
The buffer would look like: “com<>pletion”, with <> representing
the point. @code{completion-at-point} would then think you typed
“completion” and not suggest anything else.

To avoid that problem MisTTY modifies the functions it finds in
@code{completion-at-point-functions} so that they just won’t see
anything after the point when in the terminal region. In the example
above, they’d only complete “com”, not “completion”.

That is, @code{completion-at-point} in the MisTTY terminal region
completes the text `before' the point.

If you don’t like that or don’t use a shell that supports
autosuggestions, you can turn this off with @code{M-x customize-option
mistty-wrap-capf-functions}

@node Template Expansion,Directory Tracking,Completion-at-point,Usage
@anchor{usage template-expansion}@anchor{1e}
@subsection Template Expansion


Template expansion and other form of long-running editing command
might be confused by the way MisTTY work in the terminal region. See
@ref{1f,,Long-running commands} for details.

The following template expansion packages are known to work with
MisTTY out of the box, if enabled:


@itemize -

@item 
Emacs built-in @cite{tempo} package

@item 
tempel@footnote{https://github.com/minad/tempel}

@item 
yasnippet@footnote{https://github.com/joaotavora/yasnippet}
@end itemize

Other packages might work or might be made to work with some efforts.
Please file a bug (@ref{3,,Reporting issues}) if you encounter issues with
other packages.

@node Directory Tracking,Remote Shells with TRAMP,Template Expansion,Usage
@anchor{usage directory-tracking}@anchor{20}@anchor{usage dirtrack}@anchor{b}
@subsection Directory Tracking


If you’re using @code{Bash} or @code{Fish} version 4 or later,
as a shell, you’ll discover that Emacs keeps track of the shell’s
current directory, so commands like @code{M-x find-file} know where to
start from.

If you’re using any other shell, you’ll need to configure it to tell
Emacs about its current directory, as described in @ref{21,,Directory Tracking for Fish} and in @ref{22,,Directory Tracking for Zsh}.

@code{Bash} out-of-the-box directory tracking also doesn’t work in
shells you start using @code{ssh} or @code{docker}. For that
to work, the simplest solution is to start remote shells with
TRAMP. (@ref{d,,Remote Shells with TRAMP})

@node Remote Shells with TRAMP,Directory tracking and TRAMP,Directory Tracking,Usage
@anchor{usage remote-shells}@anchor{d}@anchor{usage remote-shells-with-tramp}@anchor{23}
@subsection Remote Shells with TRAMP


If the @cite{default-directory} that is current when a new MisTTY buffer is
created contains a TRAMP path whose method supports it, MisTTY runs
the shell with the method, user and host `of that path'.

@cartouche
@quotation Tip 
@code{C-u M-x mistty-create} asks for a directory instead of using
the default one. This makes it possible to open a remote shell on a
host that no buffer is visiting. See @ref{1,,Launching}.
@end quotation
@end cartouche

For this to work, MisTTY needs to know the shell executable to use on
that host. The value of @code{mistty-shell-command} or
@code{explicit-shell-file-name} is interpreted as a local file within
that host, which might not always work.

To run different shells on different hosts, define different
connection local profiles that set @code{mistty-shell-command} and
bind them to the TRAMP host, machine or user you want, as shown in the
example below. This is described in details in the `Emacs Lisp'
manual, in the section `Connection Local Variables'.

Example:

@example
(connection-local-set-profile-variables
 'profile-usr-local-fish
 '((mistty-shell-command . ("/usr/local/bin/fish" "-i"))))

(connection-local-set-profiles '(:machine "myhost.example")
 'profile-usr-local-fish)
@end example

By default, the name of TRAMP shells include the user and hostname, if
different from the current one. If you don’t want that, configure it
on @code{M-x customize-option mistty-buffer-name}.

@node Directory tracking and TRAMP,Keybindings used by MisTTY,Remote Shells with TRAMP,Usage
@anchor{usage directory-tracking-and-tramp}@anchor{24}@anchor{usage tramp-dirtrack}@anchor{25}
@subsection Directory tracking and TRAMP


@geindex variable; mistty-allow-tramp-path
@geindex variable; mistty-host-to-tramp-path-alist

Directory tracking (@ref{b,,Directory Tracking}) normally just works in TRAMP
shells started described in the previous section.

This isn’t necessarily true of shells started from a MisTTY buffers,
by calling @code{ssh}, @code{docker} or @code{sudo}, but
it is possible to make that work, as described below.

@cartouche
@quotation Tip 
The simplest way to connect a host or docker instance you don’t
want to configure is to just start it as described in
@ref{d,,Remote Shells with TRAMP} and use @code{Bash} as your shell.
Everything then just work out of the box, at least for Bash
4.4 and later. (@ref{26,,Directory tracking in Bash})
@end quotation
@end cartouche

If you haven’t already, configure your shell to tell Emacs about
directory changes, even @code{Bash}. This is described in
@ref{26,,Directory Tracking for Bash}, in @ref{21,,Directory Tracking for Fish}, and in @ref{22,,Directory Tracking for Zsh}.

Once this is done, the shell sends out file: URLs that include the
host name. By default, MisTTY will then use that to set the default
directory to remote file paths that include that hostname using the
default TRAMP method. For example, given the file: URL
@code{file:/example.com/var/log} reported by the shell, MisTTY will
set the directory of its buffer to @code{/-:example.com:/var/log}.

If you always connect to hosts using SSH, this is likely all you need,
if not, you can still make it work as follows:


@itemize -

@item 
If you’re using some other way of connecting to your host, configure
it in @code{M-x configure-option tramp-default-method}. You can also
configure that on a per-host basis using @code{M-x configure-option
tramp-default-method-alist}

@item 
If you’re connecting to hosts in more diverse ways, you can
configure the TRAMP path MisTTY should generate using @code{M-x
configure-option mistty-host-to-tramp-path-alist}

@item 
If you want to configure the TRAMP path on the hosts, you can send
it from the prompt as Emacs-specific @code{\\032/...\\n} code
containing a TRAMP path instead of the standard file: URL
recommended in @ref{26,,Directory Tracking for Bash},
in @ref{21,,Directory Tracking for Fish}, and in
@ref{22,,Directory Tracking for Zsh}. Here’s an example
of such a code for @code{Bash} that tells TRAMP to connect to
the current docker instance:

@example
if [ "$TERM" = "eterm-color" ]; then
    PS1='\032//docker:$HOSTNAME:/$PWD\n'$PS1
fi
@end example
@end itemize

That said, if you need more than just SSH to connect to other hosts,
it might be overall just easier to start remote shells with TRAMP
(@ref{d,,Remote Shells with TRAMP}) instead of the command line, because directory
tracking just works in that case.

If everything fails, if TRAMP is causing you too much trouble and you
just don’t want MisTTY to generate remote paths at all, unset the
option @code{M-x configure-option mistty-allow-tramp-paths}.

@node Keybindings used by MisTTY,Supported OSC Control Sequences,Directory tracking and TRAMP,Usage
@anchor{usage keybindings}@anchor{12}@anchor{usage keybindings-used-by-mistty}@anchor{27}
@subsection Keybindings used by MisTTY


MisTTY relies on applications connected to the terminal to handle
keybindings in a common way, that is:


@itemize -

@item 
Any printable character: Inserts the character at the cursor position.

@item 
@code{DEL} (ASCII 127): Deletes the preceding character.

@item 
@code{C-k} (ASCII 11): Deletes from the cursor to the end of the line.

@item 
@code{C-e} (ASCII 5): Moves the cursor to the end of the line.

@item 
@code{C-a} (ASCII 1): Moves the cursor to the beginning of the line.

@item 
@code{ESC [ 200 ~ ... ESC [ 201 ~} (bracketed paste): Inserts
characters verbatim, including tabs and newlines, allowing for
multiline support.
@end itemize

These keybindings are supported by recent versions of bash, zsh, fish,
Python, and IPython.

When interacting with applications that do not support some or all of
these keybindings, operations may be limited. You will still be able
to insert characters and, when supported, delete them using backspace
or @code{C-d}. However, you may not have access to Emacs-style
operations for moving the cursor or editing text.

It is important to note that in backward i-search mode within shells,
only character insertion and deletion are supported. Thus, while most
Emacs commands may not function, you can still use simple Emacs
commands that insert text after the cursor, such as @code{yank} (with no
special characters), or delete text before the cursor, such as
@code{backward-kill-word}. For more details, see @ref{10,,Backward Search}

@node Supported OSC Control Sequences,,Keybindings used by MisTTY,Usage
@anchor{usage osc}@anchor{16}@anchor{usage supported-osc-control-sequences}@anchor{28}
@subsection Supported OSC Control Sequences


OSC are optional “operating system command” control sequences that
programs can use to communicate with the terminal and Emacs. MisTTY
supports the following OSC control sequences:


@itemize -

@item 
`OSC 0; <title> ST' and `OSC 2; <title> ST' changes the window
title. This sets the variable @code{ansi-osc-window-title} in the
MisTTY buffer, which can then be referred to in
@code{frame-title-format} to set the frame title dynamically.

@item 
`OSC 7;file://<hostname>/<path> ST' reports the shell’s current
directory to Emacs. See @ref{b,,Directory Tracking}

@item 
`OSC 8;;<url> ST <text> OSC 8;; ST' makes text clickable.

Example:

@example
printf '\e]8;;http://example.com\e\\This is a link\e]8;;\e\\\n'
@end example

@item 
`OSC 10;? ST' and `OSC 11;? ST' query the foreground or background
color. The response is an hexadecimal 16 bit RGB value.

Example: Querying the background color in Bash:

@example
$ read -t 0.1 -rs -d \\ -p $'\e]11;?\e\\' bg
$ echo "$bg" | strings
]11;rgb:1313/1c1c/2b2b
@end example

Example: A Zsh function that can figure out whether you have a light
or dark background:

@example
function bg_brightness @{
    local bg
    if read -t 0.1 -rs -d \\ "?$(printf '\e]11;?\e\\')"  bg; then
        if [[ "$bg" =~ '11;rgb:([0-9a-f]@{4@})/([0-9a-f]@{4@})/([0-9a-f]@{4@})' ]]; then
            local r g b brightness
            typeset -i 10 r=16#$@{match[1]@}
            typeset -i 10 g=16#$@{match[2]@}
            typeset -i 10 b=16#$@{match[3]@}
            (( brightness = ( 0.2126 * r + 0.7152 * g + 0.0722 * b ) * ( 256.0 / 0xffff ) ))
            if [[ $brightness -le 128 ]]; then
                echo dark
            else
                echo light
            fi
            return 0
        fi
    fi
    return 1
@}
@end example
@end itemize
@anchor{usage osc133}@anchor{29}

@itemize -

@item 
`OSC 133; A-D ; <options> ST'
@end itemize

Escape sequences that help terminals identify shell commands and their
output, originally defined by FinalTerm. Several terminals support OSC
133, such as wezterm@footnote{https://wezterm.org/shell-integration.html},
kitty@footnote{https://sw.kovidgoyal.net/kitty/shell-integration/#notes-for-shell-developers}
and iTerm@footnote{https://iterm2.com/documentation-shell-integration.html}, so you
might have it enabled already.

Without these commands, MisTTY uses heuristics to detect the beginning
of a prompt or of a command, they should normally not be necessary.
It’s a good idea, however, to configure your shell to send them out.
The iTerm2 website has ready-made scripts@footnote{https://iterm2.com/documentation-shell-integration.html#install-by-hand}
to configure most shells to send out OSC 133 codes.

Starting with version 4.0.0, Fish sends out codes A, C and D
automatically, but you still need to send out B at the end of your
prompt.

`OSC 133;A ST' should be sent just before the start of a prompt,
usually from a precmd function. Sending out this code allows MisTTY to
know that user input is expected.

`OSC 133;B ST' should be sent just after having written the prompt, to
signal the start of user input. It should be sent out at the very end
of the prompt.

Sending out a OSC 133 B code allows MisTTY to mark prompts so that
commands such as @cite{beginning-of-line} or @cite{imenu} are aware of where
user input starts. This can be done independently of sending out the
other codes.


@float LiteralBlock

@caption{OSC 133 B code for bash}

@example
PS1=$PS1'\e]133;B\007'
@end example

@end float



@float LiteralBlock

@caption{OSC 133 B code for zsh}

@example
PS1=$PS1$(printf '\e]133;B\007')
@end example

@end float



@float LiteralBlock

@caption{OSC 133 B code for fish}

@example
functions -c fish_prompt orig_fish_prompt

function fish_prompt
  orig_fish_prompt
  printf "\033]133;B\007"
end
@end example

@end float


`OSC 133;C ST' should be sent just before executing the command,
usually from a preexec function. Sending out this code allows MisTTY
to know where the prompt ends.

`OSC 133;D ST' should be sent at the end of the command, or when the
command is cancelled.

@cartouche
@quotation Note 
Different terminals may interpret OSS 133 codes differently. MisTTY
only supports codes A,B,C, and D for marking the user input and
prompt sections and ignores any extra fields.
@end quotation
@end cartouche

To extend the set of OSC codes supported by MisTTY, see @ref{2a,,OSC Sequences}.

@node Shells,Extending MisTTY,Usage,Contents
@anchor{shells doc}@anchor{2b}@anchor{shells id1}@anchor{2c}@anchor{shells shells}@anchor{11}
@section Shells


@menu
* Bash:: 
* Fish:: 
* Zsh:: 
* IPython:: 

@end menu

@node Bash,Fish,,Shells
@anchor{shells bash}@anchor{2d}@anchor{shells id2}@anchor{2e}
@subsection Bash


A recent version of Bash is preferable. Bash 5.1 or later is
recommended.

MisTTY works best with shells that support bracketed paste. Without
bracketed paste support, MisTTY will still work, but might behaves
unexpectedly when yanking text containing special characters.

Bash 4.5 to 5.0 supports bracketed paste, but it must be turned
on in your @code{.inputrc}, as follows:

@example
set enable-bracketed-paste on
@end example

Bash versions older than 4.5 don’t support bracketed paste.

Additionally, Bash versions older than 4.4 require extra setup to
enable directory tracking, as documented in @ref{26,,Directory tracking in Bash}.

@menu
* Multi-line prompts in Bash:: 
* Directory tracking in Bash:: 
* VI mode in Bash:: 
* Fancy prompts in Bash:: 

@end menu

@node Multi-line prompts in Bash,Directory tracking in Bash,,Bash
@anchor{shells multi-line-prompts-in-bash}@anchor{2f}
@subsubsection Multi-line prompts in Bash


When you press @code{RET} on an incomplete command, @code{bash}
has the annoying habit of starting a secondary prompt which doesn’t
let you go back to the previous line with the default keybindings.

To work around that, type @code{S-<return>} instead of @code{RET}
while on the terminal zone of a MisTTY buffer. This sends a newline
without running the command. You’ll then end up with one multi-line
prompt that you can edit normally. This requires Bash 5.1 or an
earlier version with bracketed paste mode turned on.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.

Please be aware that when editing a multi-line command in Bash, MisTTY
may leave trailing spaces at the end of some lines. In situations
where these are significant, you will need to remove trailing spaces
using @code{C-d} or @code{DEL}.

@node Directory tracking in Bash,VI mode in Bash,Multi-line prompts in Bash,Bash
@anchor{shells bash-dirtrack}@anchor{26}@anchor{shells directory-tracking-in-bash}@anchor{30}
@subsubsection Directory tracking in Bash


@geindex variable; mistty-set-EMACS

Recent versions of @code{bash} already send the current directory
when they detects that it’s called from Emacs with
@code{TERM=eterm-color}. This works fine for local shell as well as remote
shells run with TRAMP.

If you ssh into a host from an existing MisTTY buffer, however,
@code{bash} will not send the remote directory. If you want this
use case to work, extend your prompt to send out an OSC7 sequence to
have @code{bash} send the current directory and hostname to
MisTTY.

To do that, you might add the following to @code{~/.bashrc}:

@example
if [ "$TERM" = "eterm-color" ]; then
  PS1='\[\e]7;file://$HOSTNAME$PWD\e\\\\\]'$PS1
fi
@end example

Such sequence are either ignored or understood by most terminals, so
you don’t absolutely need to check TERM.

Versions of @code{bash} older than 4.4 only enable directory
tracking if the env variable EMACS is set. You can have MisTTY set
this env variable when it starts a shell by going to @cite{M-x customize-option mistty-set-EMACS}. @code{mistty-set-EMACS} also
works as a connection-local variable, to set the EMACS env variable
only on some hosts that use an old version of @code{bash}.

For example:

@example
(connection-local-set-profile-variables
 'profile-old-bash
 '((mistty-set-EMACS . t)
   (mistty-shell-command . ("/bin/bash" "-i"))))

(connection-local-set-profiles '(:machine "oldhost.example.com")
 'profile-old-bash)
(connection-local-set-profiles '(:protocol "docker")
 'profile-old-bash)"
@end example

@node VI mode in Bash,Fancy prompts in Bash,Directory tracking in Bash,Bash
@anchor{shells vi-mode-in-bash}@anchor{31}
@subsubsection VI mode in Bash


To communicate with @code{bash}, MisTTY requires the shell to be
in its default editing mode, that is, the emacs mode. `Please make
sure you haven’t put readline or bash in vi mode before trying out
MisTTY.'

To turn on vi mode in readline everywhere but MisTTY, you can add
something like the following into @code{~/.inputrc}:

@example
$if term=eterm
  set editing-mode emacs
$else
  set editing-mode vi
$endif
@end example

Or, in bash @code{~/.bashrc}:

@example
if [ "$TERM" != "eterm-color" ]; then
  set -o vi
fi
@end example

@node Fancy prompts in Bash,,VI mode in Bash,Bash
@anchor{shells fancy-prompts-in-bash}@anchor{32}
@subsubsection Fancy prompts in Bash


MisTTY is compatible with stylized prompts, such as those produced by
powerline-go@footnote{https://github.com/justjanne/powerline-go}. However,
given the numerous variations in how these prompts are created, issues
may arise.

If you suspect that your shell prompt may be causing problems, try
configuring your shell to send out @ref{29,,OSC 133} codes to
help MisTTY correctly identify your prompt. Assuming you have a
working PS1 already, OSC 133 support can be added with:

@example
PS1='\[\e]133;A\007\]'$PS1'\[\e]133;B\007\]'
@end example

If you forget to put the OSC sequences in PS1 within @code{\[...\]}, Bash
might be confused by the OSC sequences and you might have strange
issues when exiting reverse-i-search.

@node Fish,Zsh,Bash,Shells
@anchor{shells fish}@anchor{33}@anchor{shells id3}@anchor{34}
@subsection Fish


A recent version of Fish is preferable. MisTTY relies on bracketed
paste mode, on by default, so it should not be turned off.

@menu
* Autosuggestions in Fish:: 
* Command History in Fish:: 
* Directory tracking in Fish:: 
* Multi-line prompts in Fish:: 
* VI mode in Fish:: 
* Fancy prompts in Fish:: 

@end menu

@node Autosuggestions in Fish,Command History in Fish,,Fish
@anchor{shells autosuggestions-in-fish}@anchor{35}
@subsubsection Autosuggestions in Fish


@code{fish} autosuggestions work normally in MisTTY. However, the
usual way of accepting an autosuggestion, pressing the right arrow
key, is very inconvenient as this is bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to
type @code{C-e}. This works in normal terminals as well.

@node Command History in Fish,Directory tracking in Fish,Autosuggestions in Fish,Fish
@anchor{shells command-history-in-fish}@anchor{36}
@subsubsection Command History in Fish


To make full use of @code{fish} command history, you’ll want to
forward some additional shortcuts to fish:

@example
(keymap-set mistty-prompt-map "M-<up>" #'mistty-send-key)
(keymap-set mistty-prompt-map "M-<down>" #'mistty-send-key)
(keymap-set mistty-prompt-map "M-<left>" #'mistty-send-key)
(keymap-set mistty-prompt-map "M-<right>" #'mistty-send-key)
@end example

This can also be done by calling @code{use-package} as shown in
@ref{a,,Installation}.

When in reverse history search mode, @code{fish} enters a mode
that lets you select an option using the arrow keys. To send
up/down/left/right directly to @code{fish}, you can:


@itemize -

@item 
use @code{M-p} to go up and @code{M-n} to go down, or, if you prefer

@item 
use @code{C-q <up>} @code{C-q <down>} @code{C-q <left>} @code{C-q <right>}, or even

@item 
@code{C-c C-q} to temporarily send all send key presses to @code{fish}
@end itemize

@node Directory tracking in Fish,Multi-line prompts in Fish,Command History in Fish,Fish
@anchor{shells directory-tracking-in-fish}@anchor{37}@anchor{shells fish-dirtrack}@anchor{21}
@subsubsection Directory tracking in Fish


Starting with version 4.0.0, Fish sends out an OSC7 sequence by
default, so directory tracking doesn’t require any configuration.

For older versions of fish, extend your prompt to send out an OSC7
sequence to have @code{fish} send the current directory and
hostname to MisTTY. To do that, you might add the following to
@code{~/.local/config/fish/config.fish}:

@example
if [ "$TERM" = "eterm-color" ]
  function osc7_send_pwd --on-event fish_prompt
    printf "\e]7;file://%s%s\e\\\\" (hostname) "$PWD"
  end
end
@end example

such sequence are either ignored or understood by most terminals. You
might already have it set up.

@node Multi-line prompts in Fish,VI mode in Fish,Directory tracking in Fish,Fish
@anchor{shells multi-line-prompts-in-fish}@anchor{38}
@subsubsection Multi-line prompts in Fish


@code{fish} automatically detects when a command is incomplete
when you type @code{RET} and launches a multi-line prompt, which
MisTTY knows to navigate.

@geindex variable; mistty-skip-empty-spaces

The cursor jumps over indent space while on such a prompt, just like
in a normal terminal. @code{M-x customize-option
mistty-skip-empty-spaces} allows you to turn that on or off in a
MisTTY buffer.

@node VI mode in Fish,Fancy prompts in Fish,Multi-line prompts in Fish,Fish
@anchor{shells vi-mode-in-fish}@anchor{39}
@subsubsection VI mode in Fish


To communicate with @code{fish}, MisTTY requires the shell to be
in its default editing mode, that is, the emacs mode. `Please make
sure you haven’t put readline or bash in vi mode before trying out
MisTTY.'

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in @code{~/.zshrc}:

@example
if [ "$TERM" != "eterm-color" ]
  fish_vi_key_bindings
end
@end example

@node Fancy prompts in Fish,,VI mode in Fish,Fish
@anchor{shells fancy-prompts-in-fish}@anchor{3a}
@subsubsection Fancy prompts in Fish


MisTTY is known to work with powerline-shell prompts or Tide@comma{} on Fish@footnote{https://github.com/IlanCosman/tide}, including right prompts.

If you suspect that your shell prompt may be causing problems, try
configuring your shell to send out @ref{29,,OSC 133} codes to
help MisTTY correctly identify your prompt.

@node Zsh,IPython,Fish,Shells
@anchor{shells id4}@anchor{3b}@anchor{shells zsh}@anchor{3c}
@subsection Zsh


A recent version of Zsh is preferable.

Zsh supports bracketed paste, which MisTTY relies on, since version
5.1. Older versions will work, but with limitations, and you might get
unexpected results if you yank text containing special characters.

@menu
* Autosuggestions in Zsh:: 
* Directory tracking in Zsh:: 
* Multi-line prompts in Zsh:: 
* VI mode in Zsh:: 
* Fancy prompts in Zsh:: 

@end menu

@node Autosuggestions in Zsh,Directory tracking in Zsh,,Zsh
@anchor{shells autosuggestions-in-zsh}@anchor{3d}
@subsubsection Autosuggestions in Zsh


Fish-like @code{zsh} autosuggestions work normally in MisTTY, if
you’ve turned these on. However, the usual way of accepting an
autosuggestion, pressing the right arrow key, is very inconvenient as
this is normally bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to
type @code{C-e}. This works in normal terminals as well.

@node Directory tracking in Zsh,Multi-line prompts in Zsh,Autosuggestions in Zsh,Zsh
@anchor{shells directory-tracking-in-zsh}@anchor{3e}@anchor{shells zsh-dirtrack}@anchor{22}
@subsubsection Directory tracking in Zsh


Extend your prompt to send out an OSC7 sequence to have
@code{zsh} send the current directory and hostname to MisTTY. To
do that, you might add the following to @code{~/.zshrc}:

@example
function osc7_precmd() @{
  printf "\e]7;file://%s%s\e\\\\" "$HOSTNAME" "$PWD"
@}
precmd_functions+=(osc7_precmd)
@end example

Such sequence are either ignored or understood by any well-behaved
terminals, so you shouldn’t need to check the terminal.

@node Multi-line prompts in Zsh,VI mode in Zsh,Directory tracking in Zsh,Zsh
@anchor{shells multi-line-prompts-in-zsh}@anchor{3f}
@subsubsection Multi-line prompts in Zsh


When you press @code{RET} on an incomplete command, @code{zsh}
has the annoying habit of starting a secondary prompt. MisTTY doesn’t
know how to go back to the previous prompt from such a prompt.

To work around that, type @code{S-<return>} instead of @code{RET}
while on the terminal zone of a MisTTY buffer. This sends a newline
without running the command. You’ll then end up with one multi-line
prompt that you can edit normally. This requires a version of Zsh that
supports bracketed paste mode, 5.1 or later.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.

Please be aware that when editing a multi-line command in Zsh, MisTTY
may leave trailing spaces at the end of some lines. In situations
where these are significant, you will need to remove trailing spaces
using @code{C-d} or @code{DEL}.

@node VI mode in Zsh,Fancy prompts in Zsh,Multi-line prompts in Zsh,Zsh
@anchor{shells vi-mode-in-zsh}@anchor{40}
@subsubsection VI mode in Zsh


To communicate with @code{zsh}, MisTTY requires the shell to be in
its default editing mode, that is, the emacs mode. `Please make sure
you haven’t put readline or bash in vi mode before trying out
MisTTY.'

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in @code{~/.zshrc}:

@example
if [ "$TERM" != "eterm-color" ]; then
  bindkey -v
fi
@end example

@node Fancy prompts in Zsh,,VI mode in Zsh,Zsh
@anchor{shells fancy-prompts-in-zsh}@anchor{41}
@subsubsection Fancy prompts in Zsh


MisTTY is compatible with right prompts and fancy multi-line prompts,
such as the ones created by powerlevel10k@footnote{https://github.com/romkatv/powerlevel10k}, though there are some
limitations.

Transient prompts can interfere with MisTTY’s commands, such as
@cite{mistty-previous-output} (@code{C-c C-p}) and
@cite{mistty-create-buffer-with-output} (@code{C-c C-r}). If these commands
are important to you, disable transient prompts when @cite{TERM} is set to
@cite{eterm-color}.

When using a multi-line prompt, to ensure proper functionality,
configure your shell to send OSC 133 (Final Term) codes, at least A
and C, so MisTTY correctly recognizes the beginning and end of the
prompt. See @ref{29,,OSC 133}

The minimum configuration that would help MisTTY might look like this:

@example
function osc133_precmd() @{
      printf '\033]133;A\007'
@}
precmd_functions+=(osc133_precmd)

function osc133_preexec() @{
      printf '\033]133;C\007'
@}
preexec_functions+=(osc133_preexec)
@end example

If you suspect that your shell prompt may be causing problems, try
configuring your shell to send out @ref{29,,OSC 133 codes} to
help MisTTY correctly identify your prompt.

@node IPython,,Zsh,Shells
@anchor{shells id5}@anchor{42}@anchor{shells ipython}@anchor{43}
@subsection IPython


Editing, and cursor movements should work out of the box with
@code{ipython}, even in multi-line commands, `provided you use the
default prompts'.

@geindex variable; mistty-move-vertically-regexps
@geindex variable; mistty-multi-line-continue-prompts

If you modified the @code{ipython} prompts, you’ll need to teach
MisTTY about these prompts for multi-line movement and editing to
work.

Go to @code{M-x configure-option mistty-move-vertically-regexps} and
add to the list a regular expression that matches your prompt. Make
sure that your regular expression is specific to your IPython prompt,
as mistakenly matching with @code{bash} or @code{zsh} would
have rather catastrophic results.

Go to @code{M-x configure-option mistty-multi-line-continue-prompts}
and add to the list a regular expression that matches your IPython
continue prompt, that is, the prompt that IPython adds to the second
and later lines of input. Again, be specific. The regular expression
shouldn’t match any other prompts. You don’t need to do anything here
if you configured IPython to not output any continue prompt.

@node Extending MisTTY,FAQ,Shells,Contents
@anchor{extensions doc}@anchor{44}@anchor{extensions extending-mistty}@anchor{45}
@section Extending MisTTY


@menu
* Hooks:: 
* OSC Sequences:: 
* Writing Your Own Commands:: 
* Terminal Keymap:: 
* Auto-complete:: 
* Long-running commands:: 

@end menu

@node Hooks,OSC Sequences,,Extending MisTTY
@anchor{extensions hooks}@anchor{46}@anchor{extensions id1}@anchor{47}
@subsection Hooks


@menu
* mistty-mode-hook:: 
* mistty-interactive-insert-hook:: 
* mistty-after-process-start-hook:: 
* mistty-after-process-end-hook:: 
* mistty-entered-fullscreen-hook:: 
* mistty-left-fullscreen-hook:: 

@end menu

@node mistty-mode-hook,mistty-interactive-insert-hook,,Hooks
@anchor{extensions mistty-mode-hook}@anchor{48}
@subsubsection mistty-mode-hook


@geindex variable; mistty-mode-hook
@geindex hook; mistty-mode-hook

The hook @code{mistty-mode-hook} is called on every MisTTY buffer
just after creating the buffer and selecting a window for it but
before executing the shell, with the buffer selected.

If you have enabled autocomplete or autosuggestion globally, you might
want to disable it for MisTTY buffers from a function called by
@code{mistty-mode-hook}.

This hook also provides a good time to rename the buffer, change its
directory or change environment variables, to be inherited by the
process.

For example, if you wanted a more generic name for the MisTTY buffers,
you could do:

@example
(defun my-lets-call-it-shell ()
  (rename-buffer (generate-new-buffer-name "*shell*")))
(add-hook 'mistty-mode-hook #'my-lets-call-it-shell)
@end example

@geindex variable; mistty-interactive-insert-hook
@geindex hook; mistty-interactive-interactive

@node mistty-interactive-insert-hook,mistty-after-process-start-hook,mistty-mode-hook,Hooks
@anchor{extensions mistty-interactive-insert-hook}@anchor{49}
@subsubsection mistty-interactive-insert-hook


@code{mistty-interactive-insert-hook} is a hook that is called when
text is typed in the terminal region. It’s not called, for example,
for text that is inserted or displayed by the shell.

This hook provides an appropriate time to trigger auto-completion UI,
which, by default, doesn’t work in the terminal region, as discussed
in @ref{1c,,Auto-complete}.

Auto-completion doesn’t work in the terminal region because it often
requires calling a post-command function. To work around that, in most
case, it’s enough to just turn on the option @code{M-x
customize-option mistty-simulate-self-insert-command}, which enables
the function @code{mistty-self-insert-command}, called by this hook
by default.

This might not always work and have unintended effects, so you might
prefer to trigger the auto-completion UI yourself by adding your own
function to this hook and turning the above option off.

@node mistty-after-process-start-hook,mistty-after-process-end-hook,mistty-interactive-insert-hook,Hooks
@anchor{extensions mistty-after-process-start-hook}@anchor{4a}
@subsubsection mistty-after-process-start-hook


@code{mistty-after-process-start-hook} is a normal hook called from
within a new MisTTY work buffer just after starting the process,
usually a shell. The process itself is available as
@code{mistty-proc}. At the time this hook is called, the buffer is
typically empty, as no output from the process has been processed.

@node mistty-after-process-end-hook,mistty-entered-fullscreen-hook,mistty-after-process-start-hook,Hooks
@anchor{extensions mistty-after-process-end-hook}@anchor{4b}
@subsubsection mistty-after-process-end-hook


@code{mistty-after-process-end-hook} is called from within a MisTTY
work buffer just after the process ended. The process is passed as an
argument to the hook and its status can be accessed using
@code{process-status}.

This can be used to, for example, kill the MisTTY work buffer after
the shell exits successfully, with @code{mistty-kill-buffer} or
@code{mistty-kill-buffer-and-window}.

@example
(add-hook 'mistty-after-process-end-hook
          'mistty-kill-buffer-and-window)
@end example

@node mistty-entered-fullscreen-hook,mistty-left-fullscreen-hook,mistty-after-process-end-hook,Hooks
@anchor{extensions mistty-entered-fullscreen-hook}@anchor{4c}
@subsubsection mistty-entered-fullscreen-hook


@code{mistty-entered-fullscreen-hook} is a normal hook called from
within a MisTTY work buffer just after switching to fullscreen mode.

In this mode, @code{mistty-fullscreen} is non-nil and user commands
run within the terminal buffer, available as
@code{mistty-term-buffer}. The work buffer is kept, but usually
buried until @code{mistty-toggle-buffers} is called.

@node mistty-left-fullscreen-hook,,mistty-entered-fullscreen-hook,Hooks
@anchor{extensions mistty-left-fullscreen-hook}@anchor{4d}
@subsubsection mistty-left-fullscreen-hook


@code{mistty-left-fullscreen-hook} is a normal hook called from
within a MisTTY work buffer just after switching back to normal mode.

In this mode, @code{mistty-fullscreen} is nil and user commands run
in the work buffer.

@node OSC Sequences,Writing Your Own Commands,Hooks,Extending MisTTY
@anchor{extensions ext-osc}@anchor{2a}@anchor{extensions osc-sequences}@anchor{4e}
@subsection OSC Sequences


OSC are “operating system command” control sequences. MisTTY supports
some of these sequences and ignores the others.

By default, the supported sequences are OSC 2 (set window title), 7
(directory tracking, already mentioned in @ref{b,,Directory Tracking}) and 8
(hyperlinks), thanks to @code{ansi-osc.el}.

@geindex variable; mistty-osc-handlers

To add more, register handlers to @code{mistty-osc-handlers}. The
format is the same as the handlers supported for
@code{ansi-osc-handlers} and can usually be used interchangeably.

When working on OSC handlers for MisTTY, it’s important to keep the
following in mind: MisTTY separate buffers for the terminal (a
@code{term-mode} buffer) and for MisTTY itself. The OSC handlers run
in the term-mode buffer.

@geindex variable; mistty-variables-to-copy

One consequence of this is that if you set a buffer-local variable in
a handler, it won’t be available in the MisTTY buffer unless you
register it to @code{M-x configure-option mistty-variables-to-copy}

MisTTY provides helpers for writing OSC handlers that set text
properties:

@geindex command; mistty-register-text-properties
@geindex command; mistty-unregister-text-properties


@itemize -

@item 
The function @code{mistty-register-text-properties} registers a set
of text properties to set on any text written to the terminal until
@code{mistty-unregister-text-properties} is called with the
same argument.
@end itemize

@node Writing Your Own Commands,Terminal Keymap,OSC Sequences,Extending MisTTY
@anchor{extensions custom-commands}@anchor{4f}@anchor{extensions writing-your-own-commands}@anchor{50}
@subsection Writing Your Own Commands


You might find the following functions useful if you’d like to write
commands that extend MisTTY’s behavior:

@geindex function; mistty-mode


@table @asis

@item (mistty-mode): function

This function sets the major mode of the current buffer to
mistty-mode. This only useful when followed by a call to
@code{mistty-exec}, described below.
@end table

@geindex function; mistty-exec


@table @asis

@item (mistty-exec PROGRAM &optional :width WIDTH :height HEIGHT)

This functions starts PROGRAM in the current buffer, which must
be a @code{mistty-mode} buffer.

PROGRAM is normally a list of executable and its argument. It can
also be a string containing only the executable, if no arguments
to be set.

It is a good idea to display the buffer before calling this
function, because the size of the terminal when PROGRAM is started
is taken from the windows displaying the buffer.

Example:

@example
(with-current-buffer (generate-new-buffer "*terminal*")
  (mistty-mode)
  (pop-to-buffer (current-buffer))
  (mistty-exec '("bash" "-i")))
@end example

If the buffer isn’t displayed, the terminal size is taken from the
currently selected window, which might not be what you want. You can
also set an arbitrary terminal size by passing the :width and
:height optional keyword arguments and calling
@code{mistty-terminal-size-tracks-windows} once the buffer has been
tied to a window of a reasonable size, but that might cause a
visible terminal refresh.
@end table

@geindex function; mistty-send-string


@table @asis

@item (mistty-send-string STR): function

This function sends a string to the terminal, unmodified. The string
that is sent appear only after the function return - and it might
not ever appear at all depending on the application attached to the
terminal. This is used to implement @code{mistty-sudo} for example.
@end table

@geindex function; mistty-on-prompt-p


@table @asis

@item (mistty-on-prompt-p POS) : function

This function returns non-nil if the POS is inside of a prompt
MisTTY is aware of. This is useful for writing commands that behave
differently on a prompt than on program output, even while inside of
the terminal zone. It is used to implement
@code{mistty-beginning-of-line} for example.
@end table

@geindex function; mistty-maybe-realize-possible-prompt


@table @asis

@item (mistty-maybe-realize-possible-prompt &optional POS) : function

This function might be useful to call in your commands to tell
MisTTY that there’s likely a prompt at the current pointer
position or at POS.
@end table

@geindex function; mistty-before-position


@table @asis

@item (mistty-before-positional) : function

This function not only checks whether there’s a prompt at the
position, but also attempt to move the terminal cursor to that
position.
@end table

@node Terminal Keymap,Auto-complete,Writing Your Own Commands,Extending MisTTY
@anchor{extensions term-keymap}@anchor{51}@anchor{extensions terminal-keymap}@anchor{52}
@subsection Terminal Keymap


@geindex function; mistty-translate-key
@geindex map; mistty-term-key-map

To forward a key binding to the application attached to the terminal
@cite{mistty-send-key} first needs to convert that key binding to something
applications will understand. The translation is done by
@code{mistty-translate-key}.


@table @asis

@item mistty-translate-key : function

This function takes an Emacs key binding, as returned by @cite{kbd} and
returns a string containing the sequence of characters that
correspond to that key to send to the application tied to the
terminal.
@end table

The default terminal keymap used by MisTTY mimics @code{xterm} key
bindings. You might extend it or change it by changing the map
@code{mistty-term-key-map}.

For example, you can change the string that correspond to the first
function keys from their default (”\eOP” - “\eOS”) as follows:

@example
(define-key mistty-term-key-map (kbd "<f1>") "\e[11~")
(define-key mistty-term-key-map (kbd "<f2>") "\e[12~")
(define-key mistty-term-key-map (kbd "<f3>") "\e[13~")
(define-key mistty-term-key-map (kbd "<f4>") "\e[14~")
@end example

@geindex function; mistty-reverse-input-decode-map


@table @asis

@item mistty-reverse-input-decode-map: function

This function generates alternative values for
@code{mistty-term-key-map} for you if you’d like mimic another
set of key bindings than xterm, for example, to generate a keymap
that simulates rxvt, you might do:

@example
(load-library "term/rxvt.el")
(mistty-reverse-input-decode-map rxvt-function-map)
@end example
@end table

@code{mistty-reverse-input-decode-map.el} is not included into the
distribution; it’s only available on github@footnote{https://github.com/szermatt/mistty/tree/master/extras}.

@node Auto-complete,Long-running commands,Terminal Keymap,Extending MisTTY
@anchor{extensions auto-complete}@anchor{53}@anchor{extensions autocomplete}@anchor{1c}
@subsection Auto-complete


@geindex variable; mistty-simulate-self-insert-command

Auto-complete is a completion UI that shows up automatically after
some delay, without having to call @cite{completion-at-point}. This used
not to work in MisTTY terminal region. The hook
@code{mistty-simulates-self-insert-command} was introduced to fix
that. See @code{mistty-interactive-insert-hook} in @ref{46,,Hooks}.

By default this hook calls the buffer @code{pre-command-hook} and
@code{post-command-hook} with @code{this-command} set to
@code{self-insert-command}, as this is the way auto-complete is
normally triggered. This can be turned off if necessary using the
option on @code{M-x customize-option
mistty-simulate-self-insert-command}.

If the behavior described above doesn’t work for some packages, it
should be possible to build a custom bridge between this hook and the
auto-completion package.

@node Long-running commands,,Auto-complete,Extending MisTTY
@anchor{extensions long-running-commands}@anchor{54}@anchor{extensions lrc}@anchor{1f}
@subsection Long-running commands


In Emacs, most editing tools are run as a single Emacs command, but
some tools span multiple Emacs command, for example, when you expand a
snippet with yasnippet@footnote{https://github.com/joaotavora/yasnippet},
the snippet template is inserted into the buffer, together with
placeholders for you to fill some missing information.

Filling in a template is a series of Emacs commands, that, together,
have a single effect: to insert a snippet of text. MisTTY calls this a
long-running command.

When run in the terminal region, such long-running commands fail as
MisTTY sends the initial text to the shell, which echoes it back to be
redisplayed, possibly jumbling things and definitely destroying any
overlays.

To avoid such situations, MisTTY holds back sending text to the shell
until long-running commands are done. For that to work, MisTTY needs
to know when such command start and end.

You can tell whether MisTTY thinks a long-running command is active,
as it displays `CMD' in the modeline. You can also do it
programmatically:

@geindex function; mistty-long-running-command-p


@table @asis

@item mistty-long-running-running-command-p : function

This function returns non-nil if MisTTY thinks a long-running
command is active.
@end table

@geindex variable; mistty-detect-foreign-overlays
@geindex option; mistty-detect-foreign-overlays
@geindex variable; mistty-foreign-overlay-properties
@geindex option; mistty-foreign-overlay-properties

MisTTY detects some long-running commands by looking for overlays they
typically add to the buffer. This can be extended with @code{M-x
customize-option mistty-foreign-overlay-properties} or turned off with
@code{M-x customize-option mistty-detect-foreign-overlays}.

To add a new property to @cite{mistty-foreign-overlay-properties}, start
the interactive command, look for overlays with @cite{overlays-in} then get
their properties with @cite{overlay-properties}. You can then choose, on
that list, a property or face that identifies the feature or package.

If you find yourself extending @cite{mistty-foreign-overlay-properties},
please add an issue to @indicateurl{https://github.com/szermatt/mistty/issues/new}
so it can be integrated into the next version.

Alternatively, as not all long-running commands that can be confused
by MisTTY use overlays, you might need to tell MisTTY about them.
MisTTY does it already for @code{completion-in-region}.

@geindex function; mistty-report-long-running-command


@table @asis

@item mistty-report-long-running-command : function

This function can be called to tell MisTTY when a long-running
command start and end. It’s typically called from hooks provided
by the package of the long-running command.
@end table

Here’s an example of code that would detect
@code{completion-in-region-mode} if MisTTY didn’t already do it:

@example
(defun my-completion-in-region ()
  (mistty-report-long-running-command
    'my-completion-in-region completion-in-region-mode))
(defun my-detect-completion-in-region ()
   (add-hook 'completion-in-region-mode-hook
             #'my-completion-in-region nil t))
(add-hook 'mistty-mode-hook #'my-detect-completion-in-region)
@end example

@node FAQ,Contributing,Extending MisTTY,Contents
@anchor{faq doc}@anchor{55}@anchor{faq faq}@anchor{56}
@section FAQ


`The display is all messed up'

@quotation

First, check the value of the environment variable @code{TERM}.
It MUST be @code{eterm-color} or @code{eterm-direct}; nothing
else will work reliably.

If that still doesn’t work, please file a bug as described in
@ref{3,,Reporting issues}.
@end quotation

`warning: Could not set up terminal'

@quotation

If you’re getting errors such as the following from programs such
as @code{less} or @code{vi}, this means that the
@code{TERM} environment variable is set properly, but the host
doesn’t know about the terminal @code{eterm-color} or
@code{eterm-direct}.

@example
warning: Could not set up terminal.
warning: TERM environment variable set to 'eterm-color'.
warning: Check that this terminal type is supported on this system.
@end example

This might easily happen if you ssh into another host from inside
a MisTTY buffer. SSH typically forwards the value of the
@code{TERM} environment variable, which contains the terminal
name, but not @code{TERMCAP} environment variable, which contains
the terminal definition.

To fix this issue, you can do any one of the following:


@itemize -

@item 
Connect using TRAMP, as described in @ref{d,,Remote Shells with TRAMP}. TRAMP takes
care of setting all necessary environment variables.

@item 
Add the definition of @code{eterm-color} to all hosts you
regularly log into. To do that, follow the instructions in
@code{<data-directory>/e/README}, where
@code{<data-directory>} is the “etc” directory of your Emacs
installation, as shown by @cite{M-x describe-variable data-directory} - usually, that’s
@code{/usr/share/emacs/<emacs version>/etc/e/README}

@item 
Tell ssh to forward the @code{TERMCAP} environment variable. This
requires changing `both' the server and client configuration. On the
server @code{sshd_config}, add @code{AcceptEnv TERMCAP}. On the
client, add @code{SendEnv TERMCAP} to @code{ssh_config} or to
@code{~/.ssh/config}
@end itemize
@end quotation

`What are all those OCOCOCO or ODODODO that appear on the screen?'

@quotation

@geindex variable; mistty-forbid-edit-regexps

These are the terminal sequences that MisTTY sends to a program
to move the cursor left or right. If you see these printed on the
terminal, it means that the program that’s currently controlling
the terminal doesn’t support these.

In such situation, you can:


@itemize -

@item 
Only type self-inserting characters and @code{DEL}.

@item 
Press @code{C-c C-q} or @code{M-x mistty-send-key-sequence} to
send what you type directly to the terminal until you turn it
off with @code{C-g}.

@item 
Write a regexp that identifies the situation and add it to
@code{M-x customize-option mistty-forbid-edit-regexps} so MisTTY
knows it should not attempt to move the cursor. The default value
identifies most shell backward search prompts.
@end itemize

See @ref{e,,Terminal vs. Scrollback} for more details.
@end quotation

`The shell isn’t answering!'

@quotation

Press @code{C-g}. If this is just a one-time thing, this will do
the trick.

If this keeps happening, check the modeline. Does it contain CMD?
It might look like this: `misTTY CMD:run'. In that case, MisTTY is
stuck in long-running command mode. This is likely due to some
package leaving overlays to the buffer that confuse MisTTY. To fix
that, turn off the option @code{M-x customize-option
mistty-detect-foreign-overlays} or, if you know which package is
causing trouble, remove the corresponding property in in @code{M-x
customize-option mistty-foreign-overlay-properties}.

For details, see @ref{1f,,Long-running commands}

If this keeps happening and the modeline does not contain CMD,
this is likely a bug. For details on filing a bug report, see
@ref{3,,Reporting issues}
@end quotation

`Why is the cursor jumping around when I move it?'

@quotation

MisTTY jumps over spaces which just “aren’t there”, such as the
spaces between the command and the right prompt, spaces added by
@code{fish} for indentation in multi-line prompts.

If it doesn’t work with your shell or setup, or if you find it
confusing, type @code{M-x customize-option
mistty-skip-empty-spaces} to turn it off.
@end quotation

`What’s with the purple line?'

@quotation

This line indicates the region of the buffer that works as a
terminal, meaning that it is not fully editable and that some
shortcuts, such as @code{TAB} are sent directly to the program
controlling the terminal.

This is covered in depth in @ref{e,,Terminal vs. Scrollback}.

If you just don’t want to see that line, turn it off with
@code{M-x customize-option mistty-fring-enabled}
@end quotation

`Why doesn’t <insert package here> work in the terminal region?'

@quotation

The terminal region of MisTTY behaves very differently from a
normal buffer; many things can go wrong with commands that do more
than just editing text.

One such issue is with interactivly editing the buffer over
multiple Emacs command, which MisTTY calls a long-running command.
There are ways of making such commands work if they don’t already,
described in @ref{1f,,Long-running commands}.

Another such issue is with autocomplete, with can also be made to
work as described in @ref{1c,,Auto-complete}.

While this works with some packages, it might not necessarily work
with the package you want - it might even not be possible to make
it work, but we can always try. Please file a bug@footnote{https://github.com/szermatt/mistty/issues} if you encounter
such a package you’d like to work with MisTTY.
@end quotation

`… but it used to work!'

@quotation

Older versions used to detect any unknown overlay as a
long-running command, described in @ref{1f,,Long-running commands}. Unfortunately, this
caused problems with many packages which, leaving overlays around
for a long time, prevented MisTTY from working at all.

The good news is that it’s likely easy to make it work again by
detecting the specific kind of overlays the package is using.
Please see @ref{1f,,Long-running commands}, or file a bug (@ref{3,,Reporting issues}) mentioning
the package you’re using, its version and how you installed it.
@end quotation

`Why am I getting connection errors from TRAMP?'

@quotation

MisTTY tries to track the current directory whenever possible,
including from remote shells. You might get connection errors if
you connect to a remote or special shell from an existing MisTTY
that Emacs cannot access through TRAMP and then Emacs tries to
access a nonexisting remote file.

The best solution in such case is to configure TRAMP to connect to
that host, adding an entry to @code{M-x configure-option
mistty-host-to-tramp-path-alist}, if that’s necessary.

If that’s not possible or if you don’t want to bother, you might
find it convenient to just disable the generation of TRAMP paths
using @code{M-x customize-option mistty-allow-tramp-paths}.

For more details, see @ref{b,,Directory Tracking}.
@end quotation

`The buffer is killed when the shell finishes. This didn’t use to happen!'

@quotation

@geindex variable; mistty-at-end

MisTTY now by default kills the buffer and its containing window
when the shell ends. If you don’t like that, change the option at
@code{M-x customize-option mistty-at-end} to do nothing.
@end quotation

@node Contributing,,FAQ,Contents
@anchor{contrib doc}@anchor{57}@anchor{contrib contributing}@anchor{58}
@section Contributing


@menu
* Reporting issues:: 
* Suggesting features:: 
* Asking questions:: 
* Code contributions:: 
* Documentation contributions:: 

@end menu

@node Reporting issues,Suggesting features,,Contributing
@anchor{contrib reporting}@anchor{3}@anchor{contrib reporting-issues}@anchor{59}
@subsection Reporting issues


At this time, the most useful thing you can do to help is and useful
bug reports to the Issue Tracker@footnote{https://github.com/szermatt/mistty/issues}

In your report, please discuss what you wanted to happen as well as
what happened. Also, please include enough information to reproduce
the issue. Such as:


@itemize -

@item 
the name and version of the program you were running - usually a shell

@item 
the version of Emacs you’re running, taken, for example, from @code{M-x about-emacs}

@item 
whether you’re running Emacs in a window environment or a terminal

@item 
what kind of prompt you’re using, that is, what it looks like, what
character it ends with, how many lines it has and whether you’re
using any kind of right prompt
@end itemize

@geindex command; mistty-start-log
@geindex command; mistty-stop-log

If you can reproduce reliably, please include the content of the
buffer @code{*mistty-log*} into your report, as follows:


@itemize -

@item 
Enable logging by calling @code{M-x mistty-start-log}

@item 
Reproduce the issue

@item 
Go to the buffer @code{*mistty-log*}

@item 
Call @code{M-x mistty-stop-log} to avoid getting more log entries

@item 
Copy the buffer content and paste it into the issue. The log
includes everything that you write to the terminal and everything
that you get back from the terminal. Please make sure you’re not
including any private information, such as password - remove them if
necessary…
@end itemize

If you cannot reproduce reliably,


@itemize -

@item 
go to @code{M-x customize-option mistty-backlog-size} to set the
backlog size to a large value, such as 50

@item 
use MisTTY normally, until the issue comes back

@item 
once it has happened again, immediately call @code{M-x
mistty-start-log}. The log will then contain entries for events that
happened just `before' you called the command.

@item 
call @code{M-x mistty-stop-log}

@item 
copy the content of the @code{*mistty-log*} buffer, strip out
anything private, and include it into the issue.
@end itemize

@node Suggesting features,Asking questions,Reporting issues,Contributing
@anchor{contrib discussion}@anchor{5a}@anchor{contrib suggesting-features}@anchor{5b}
@subsection Suggesting features


Please create a new discussion@footnote{https://github.com/szermatt/mistty/discussions} in the Ideas category or add a
feature suggestions to the Issue Tracker@footnote{https://github.com/szermatt/mistty/issues}.

@node Asking questions,Code contributions,Suggesting features,Contributing
@anchor{contrib asking-questions}@anchor{5c}
@subsection Asking questions


Start a new discussion@footnote{https://github.com/szermatt/mistty/discussions} with your question in the General category.

@node Code contributions,Documentation contributions,Asking questions,Contributing
@anchor{contrib code-contributions}@anchor{5d}
@subsection Code contributions


To contribute code to the project, open a Pull Request@footnote{https://github.com/szermatt/mistty/pulls}.

Before you do that, please make sure the any new features is covered
by tests and that the tests pass.

To run the tests, install and setup eldev@footnote{https://github.com/emacs-eldev/eldev}, then run @code{eldev
test}.

Tests can also be run from inside of Emacs, using @cite{M-x ert-run-tests-interactively} but when you do so, be aware that there
might be unexpected interaction with your Emacs configurations. The
tests passing reliably when run using @code{eldev test} is what
matters.

Please also make sure your commit message follows Conventional Commits 1.0.0@footnote{https://www.conventionalcommits.org/en/v1.0.0/}, in
short, the commit message of new features should start with “feat: “,
fixes with “fix: “, refactorings with “refactor: ” and tests with
“test: “.

@node Documentation contributions,,Code contributions,Contributing
@anchor{contrib documentation-contributions}@anchor{5e}@anchor{contrib eldev}@anchor{5f}
@subsection Documentation contributions


You don’t need to be a developer to contribute! Contribution to the
documentation or code comments are very welcome. Please open a Pull Request@footnote{https://github.com/szermatt/mistty/pulls} with your proposed modifications. To follow Conventional Commits 1.0.0@footnote{https://www.conventionalcommits.org/en/v1.0.0/}, the
commit message should start with “docs: “

The documentation is written in reStructuredText. You’ll need to
install Sphinx@footnote{https://www.sphinx-doc.org} to build it:

@example
python3 -m venv venv
. venv/bin/activate # or activate.fish on fish
pip3 install -r docs/requirements.txt
@end example

Then run @code{eldev html} to build the documentation.

@node Index,,Contents,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
