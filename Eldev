; -*- mode: emacs-lisp; lexical-binding: t -*-

(eldev-use-package-archive 'gnu-elpa)

(setq eldev-build-treat-warnings-as-errors t)
(setf eldev-project-loading-mode 'byte-compiled)
(setq sentence-end-double-space nil)
(setq eldev-files-to-package `(:and ,eldev-files-to-package
                                    (concat "!extras/*")))

(eldev-use-plugin 'autoloads)

(eldev-add-loading-roots 'test "test")
(eldev-add-extra-dependencies
 '(test emacs)
 '(:package tempel :version "0.8"))

(eldev-add-extra-dependencies '(test emacs) 'turtles)
(eldev-use-vc-repository
 'turtles :github "szermatt/turtles" :commit "2.0.1"
:setup (setq eldev-build-treat-warnings-as-errors nil
              eldev-build-suppress-warnings t)
 :teardown (setq eldev-build-treat-warnings-as-errors t
                 eldev-build-suppress-warnings nil))

(eldev-add-extra-dependencies '(test emacs) 'yasnippet)
(eldev-use-vc-repository
 'yasnippet :github "joaotavora/yasnippet" :commit "0.14.0"
 :setup (setq eldev-build-treat-warnings-as-errors nil
              eldev-build-suppress-warnings t)
 :teardown (setq eldev-build-treat-warnings-as-errors t
                 eldev-build-suppress-warnings nil))

;; Exclude work and build files so Eldev doctor ignores them.
(setf eldev-standard-excludes
      `(:or ,eldev-standard-excludes
            "./venv" "./docs/build" "./license" "./deps"))

(eldev-defoption mistty-test-bash-exe (&optional path)
  "Tests look for Bash at PATH."
  :options        (--bash)
  :optional-value PATH
  :for-command    test
  (setq mistty-test-bash-exe (executable-find path)))

(eldev-defoption mistty-test-zsh-exe (&optional path)
  "Tests look for Zsh at PATH. Empty to skip zsh tests."
  :options        (--zsh)
  :optional-value PATH
  :for-command    test
  (setq mistty-test-zsh-exe (executable-find path)))

(eldev-defoption mistty-test-fish-exe (&optional path)
  "Tests look for Fish at PATH. Empty to skip fish tests."
  :options        (--fish)
  :optional-value PATH
  :for-command    test
  (setq mistty-test-fish-exe (executable-find path)))

(eldev-defoption mistty-test-ipython-exe (&optional path)
  "Tests look for Ipython at PATH. Empty to skip ipython tests."
  :options        (--ipython)
  :optional-value PATH
  :for-command    test
  (setq mistty-test-ipython-exe (executable-find path)))

(eldev-defoption mistty-test-log ()
  "Enable mistty-log when running tests."
  :options        (--enable-test-log)
  :for-command    test
  (setq mistty-test-log t))

(defvar mistty-test-ci nil)
(eldev-defoption mistty-test-ci ()
  "Let tests know they're running on CI."
  :options        (--ci)
  :for-command    test
  (setq mistty-test-ci t))

(eldev-defbuilder mistty-builder-build-info (source target)
  :short-name     "SPHINX-TEXI"
  :message        source-and-target
  :type           many-to-one
  :source-files   "docs/source/*.rst"
  :targets        ("mistty.texi")
  :collect        ":default"
  (mistty-eldev-build-texinfo))

(defun mistty-eldev-build-texinfo ()
  (eldev-call-process "sphinx-build" '("-M" "texinfo" "docs/source" "docs/build")
                      :forward-output t
                      :die-on-error t)
  ;; Remove the date and version to keep the output stable from change
  ;; to change.
  (with-temp-buffer
    (insert-file-contents "docs/build/texinfo/mistty.texi")
    (goto-char (point-min))
    (search-forward-regexp "@\\*Generated by Sphinx [0-9.]+\\(snapshot\\)?\\.@\\*")
    (replace-match "@*Generated by Sphinx.@*")
    (goto-char (point-min))
    (search-forward-regexp "@quotation\nMisTTY \\([0-9.]+\\(snapshot\\)?\\), .*$")
    (replace-match "@quotation\nMisTTY \\1")
    (write-file "mistty.texi")))

(eldev-defcommand mistty-html-doc (&rest parameters)
  "Generate documentation HTML into docs/build/html.

First install Sphinx with:
  python3 -m venv venv
  . venv/bin/activate
  pip3 install -r docs/requirements.txt"
  :command        documentation
  :aliases        (html)
  (eldev-call-process "sphinx-build" '("-M" "html" "docs/source" "docs/build")
  :forward-output t
  :die-on-error t))

(eldev-defcleaner mistty-cleaner-docs ()
  "Delete Sphinx build dir"
  :default t
  '("docs/build"))

(eldev-use-plugin 'maintainer)
(setq eldev-release-test-local t)
(defun mistty-release-preparator (version &optional post-release-version)
  (eldev-with-file-buffer "docs/source/conf.py"
    (dolist (tag '("version" "release"))
      (goto-char (point-min))
      (search-forward-regexp (concat tag " = '\\([0-9.]+\\(snapshot\\)?\\)' *$"))
      (replace-match
       (format "%s = '%s'" tag (package-version-join
                                (or post-release-version version))))))
  (mistty-eldev-build-texinfo))
(add-hook 'eldev-release-preparators #'mistty-release-preparator)

;; After a release, add a snapshot to tag a development version, so if the
;; release is 1.0.0, the following development version is 1.0.1snapshot
;; and the next release is going to be 1.0.2 or 1.1.
(setq eldev-release-post-release-commit
      (lambda (release-version)
        (let ((major (or (nth 0 release-version) 0))
              (minor (or (nth 1 release-version) 0))
              (patch (or (nth 2 release-version) 0)))
          (list major minor (1+ patch) -4))))

(setq eldev-release-commit-message
      "chore: Release @[formatted-name]@ @[version-string]@")
(setq eldev-release-post-release-commit-message
      "chore: Development version, following release @[version-string]@")
(add-hook 'eldev-release-post-release-preparators #'mistty-release-preparator)
